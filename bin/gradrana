#!/usr/bin/env python3

import sys,argparse
import xml.sax

from gradrana.tei import TeiP5Parser
from gradrana.gliederung import Gliederung
from gradrana.konfiguration import *
from gradrana.adjacencymatrix import *
from gradrana.network import *

# argument parser

parser = argparse.ArgumentParser(
    description="Analyze a dramatic text.")
subparsers = parser.add_subparsers(
    dest="command",
    help="Call 'gradrana SUBCOMMAND -h' for help on a subcommand.")

matrix_parser = subparsers.add_parser(
    "matrix",
    help="Generate a configuration matrix of the analyzed play.",
    description="Generate a configuration matrix of the analyzed play.")
matrix_parser.add_argument(
    "INFILE",
    help="The input file containing the dramatic text.")

matrix_output = matrix_parser.add_mutually_exclusive_group()
matrix_output.add_argument(
    "-m", "--html",
    help="Generate XHTML output.",
    action="store_const",
    dest="format",
    const=HtmlKonfigurationsmatrix,
    default=HtmlKonfigurationsmatrix) 
matrix_output.add_argument(
    "-t", "--tex",
    help="Generate LaTeX output.",
    action="store_const",
    dest="format",
    const=LatexKonfigurationsmatrix)

matrix_calculator = matrix_parser.add_mutually_exclusive_group()
matrix_calculator.add_argument(
    "-p", "--presence",
    help="Evaluate presence on stage.",
    action="store_const",
    dest="calculator",
    const=praesenz,
    default=praesenz)
matrix_calculator.add_argument(
    "-c", "--contributions",
    help="Evaluate count of contributions to talk on stage.",
    action="store_const",
    dest="calculator",
    const=beitragsanzahl)
matrix_calculator.add_argument(
    "-l", "--letters",
    help="Evaluate length of utterances by counting letters (characters).",
    action="store_const",
    dest="calculator",
    const=beitragslaenge)
matrix_calculator.add_argument(
    "-w", "--words",
    help="Evaluate length of utterances by counting words.",
    action="store_const",
    dest="calculator",
    const=beitragswoerter)

matrix_parser.add_argument(
    "-s", "--sums",
    help="Include sums in output.",
    action="store_true")
matrix_parser.add_argument(
    "-z", "--zeros",
    help="Insert 0 (zero) where a value is missing.",
    action="store_const",
    dest="missing_value",
    const=0,
    default=" ")

gliederung_parser = subparsers.add_parser(
    "structuring",
    help="Inspect the structuring (acts, scenes) of a dramatic text.")
gliederung_parser.add_argument(
    "INFILE",
    help="The input file containing the dramatic text.")
gliederung_parser.add_argument(
    "-i", "--indented",
    help="Output in indented form.",
    action="store_true")
gliederung_parser.add_argument(
    "-f", "--first-speech",
    help="Include each scene's first speech. This may help to find annotation errors.",
    action="store_true")

graph_parser = subparsers.add_parser(
    "graph",
    help="Generate a social network graph of the analyzed play.")
graph_parser.add_argument(
    "INFILE",
    help="The input file containing the dramatic text.")

graph_output = graph_parser.add_mutually_exclusive_group()
graph_output.add_argument(
    "-m", "--html",
    help="Generate XHTML adjacency matrix.",
    action="store_const",
    dest="format",
    const=HtmlAdjacencyMatrix,
    default=HtmlAdjacencyMatrix) 
graph_output.add_argument(
    "-t", "--tex",
    help="Generate LaTeX adjacency matrix.",
    action="store_const",
    dest="format",
    const=LatexAdjacencyMatrix) 
graph_output.add_argument(
    "-v", "--visualization",
    help="Generate visualization of the social network graph.",
    action="store_const",
    dest="format",
    const=DramaVisualization) 

graph_calculator = graph_parser.add_mutually_exclusive_group()
graph_calculator.add_argument(
    "-p", "--presence",
    help="Evaluate presence on stage.",
    action="store_const",
    dest="calculator",
    const=praesenz,
    default=praesenz)
graph_calculator.add_argument(
    "-c", "--contributions",
    help="Evaluate count of contributions to talk on stage.",
    action="store_const",
    dest="calculator",
    const=beitragsanzahl)
graph_calculator.add_argument(
    "-l", "--letters",
    help="Evaluate length of utterances by counting letters (characters).",
    action="store_const",
    dest="calculator",
    const=beitragslaenge)
graph_calculator.add_argument(
    "-w", "--words",
    help="Evaluate length of utterances by counting words.",
    action="store_const",
    dest="calculator",
    const=beitragswoerter)

graph_parser.add_argument(
    "-z", "--zeros",
    help="Insert 0 (zero) where a value is missing.",
    action="store_const",
    dest="missing_value",
    const=0,
    default=" ")

args = parser.parse_args()
#print(args)

# Parse input file

xml_parser = xml.sax.make_parser()
tei = TeiP5Parser()
xml_parser.setContentHandler(tei)
xml_parser.setFeature(xml.sax.handler.feature_namespaces, True)
xml_parser.parse(args.INFILE)

# Do what was said in the arguments

if args.command == "matrix":
    processor = args.format(
        auswertfunktion=args.calculator,
        summen=args.sums,
        missing_value=args.missing_value)
elif args.command == "structuring":
    processor = Gliederung(
        erste_rede=args.first_speech,
        treppe=args.indented)
elif args.command == "graph":
    processor = args.format(
        auswertfunktion=args.calculator,
        missing_value=args.missing_value)

processor(tei.szenen, {})

#print(processor.personen, "\n\n", processor.kuerzel)
